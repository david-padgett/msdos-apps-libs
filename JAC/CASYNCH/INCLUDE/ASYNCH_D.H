/**
*
*  ASYNCH_D.H	Header file for ASYNCH MANAGER Data Transmission
*
*		This header file defines the standard error, status codes,
*		data types, and the functions which comprise the data
*		transmission functions.
*
*  Version 2.00 (C)Copyright Blaise Computing Inc.  1984, 1985, 1987
*
*  Version 2.02 March 11, 1988 PKM
*		Added the symbols DATA_BITS_ERR and FLOW_CONTROL_ERR to
*		reflect new return codes from SFILE_DT and RFILE_DT.
*
**/

#ifndef  DEF_ASYNCH_D		       /* Avoid duplicate definition   */

#include <asynch_2.h>		       /* "_a2" function definitions   */

#define DT_NOT_INIT	   256	       /* Transmission return codes    */
#define RECEIVE_ERROR	   257
#define TRANS_ERROR	   258
#define PACK_RCV_ERROR	   259
#define EOT_ENCOUNTERED    260
#define ERP_RD_NUMBER	   261
#define ERP_BAD_PACKET_NO  262
#define ERP_RD_STRING	   263
#define ERP_RD_ERRDET	   264
#define ERP_ERRDET_UNEQ    265

#define FILE_OPEN_ERR	   300	       /* Errors generated by SFILE_DT */
#define FILE_READ_ERR	   301	       /* and RFILE_DT		       */
#define INIT_NAK_ERR	   302
#define FINAL_ACK_ERR	   303
#define FILE_WRITE_ERR	   304
#define SOH_EOT_ERR	   305
#define DATA_BITS_ERR	   306
#define FLOW_CONTROL_ERR   307

/* File transmission contants, types and function declarations	       */

#define NUL	0x00
#define ACK	0x06
#define NAK	0x15
#define SOH	0x01
#define EOT	0x04

typedef struct			       /* File transmission parameters */
{
   char ack_char;		       /* Acknowledgment character     */
   char nak_char;		       /* Negative acknowledgment      */
   char soh_char;		       /* Start of data 	       */
   char eot_char;		       /* End of transmission	       */
   int	start_delay;		       /* Delay in trans of start chars*/
   int	max_tries;		       /* Maximum number of error tries*/
   int	cur_tries;		       /* Current error count	       */
   int	wait_period;		       /* Tics between each try        */
   int	packet_size;		       /* Packet size in bytes	       */
   int	error_detection;	       /* Error detection algorithm    */
   int	port_no;		       /* Communications port number   */
} DTPARM;

int parm_dt(DTPARM **); 	       /* Initialize data trans struct */
int wtch_dt(char *,char *);	       /* Wait for a character	       */
int spack_dt(char *,int);	       /* Send a data packet	       */
int term_dt(void);		       /* Terminate transmission       */
int start_dt(char,char *);	       /* Ready to receive signal      */
int rpack_dt(char *,int);	       /* Receive a data packet        */
int erdet_dt(char *,char *);	       /* Return error detection code  */
int sfile_dt(char *,int *);	       /* Transmit a file	       */
int rfile_dt(char *,int *);	       /* Receive a file	       */

#define  DEF_ASYNCH_D	1	       /* Prevent a second reading of  */
#endif				       /* these definitions.	       */
